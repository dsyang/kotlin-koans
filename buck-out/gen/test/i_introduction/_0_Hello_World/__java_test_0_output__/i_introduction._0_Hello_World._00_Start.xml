<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<testcase name="i_introduction._0_Hello_World._00_Start" runner_capabilities="simple_test_selector">
  <test message="TODO: &#10;        Introduction.&#10;&#10;        Kotlin Koans project consists of 42 small tasks for you to solve.&#10;        Typically you'll have to replace the function invocation 'todoTaskN()', which throws an exception,&#10;        with the correct code according to the problem.&#10;&#10;        Using 'documentation =' below the task description you can open the related part of the online documentation.&#10;            Press 'Ctrl+Q'(Windows) or 'F1'(Mac OS) on 'doc0()' to call the &quot;Quick Documentation&quot; action;&#10;            &quot;See also&quot; section gives you a link.&#10;            You can see the shortcut for the &quot;Quick Documentation&quot; action used in your IntelliJ IDEA&#10;            by choosing &quot;Help -&gt; Find Action...&quot; (in the top menu), and typing the action name (&quot;Quick Documentation&quot;).&#10;            The shortcut in use will be written next to the action name.&#10;&#10;        Using 'references =' you can navigate to the code mentioned in the task description.&#10;&#10;        Let's start! Make the function 'task0' return &quot;OK&quot;.&#10;    " name="testOk" stacktrace="util.NotImplementedException: TODO: &#10;        Introduction.&#10;&#10;        Kotlin Koans project consists of 42 small tasks for you to solve.&#10;        Typically you'll have to replace the function invocation 'todoTaskN()', which throws an exception,&#10;        with the correct code according to the problem.&#10;&#10;        Using 'documentation =' below the task description you can open the related part of the online documentation.&#10;            Press 'Ctrl+Q'(Windows) or 'F1'(Mac OS) on 'doc0()' to call the &quot;Quick Documentation&quot; action;&#10;            &quot;See also&quot; section gives you a link.&#10;            You can see the shortcut for the &quot;Quick Documentation&quot; action used in your IntelliJ IDEA&#10;            by choosing &quot;Help -&gt; Find Action...&quot; (in the top menu), and typing the action name (&quot;Quick Documentation&quot;).&#10;            The shortcut in use will be written next to the action name.&#10;&#10;        Using 'references =' you can navigate to the code mentioned in the task description.&#10;&#10;        Let's start! Make the function 'task0' return &quot;OK&quot;.&#10;    &#10;&#9;at util.KotlinUtilKt.TODO(kotlinUtil.kt:4)&#10;&#9;at i_introduction._0_Hello_World.HelloWorldKt.todoTask0(HelloWorld.kt:6)&#10;&#9;at i_introduction._0_Hello_World.HelloWorldKt.task0(HelloWorld.kt:30)&#10;&#9;at i_introduction._0_Hello_World._00_Start.testOk(_00_Start.kt:8)&#10;&#9;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#10;&#9;at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#10;&#9;at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#10;&#9;at java.lang.reflect.Method.invoke(Method.java:498)&#10;&#9;at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)&#10;&#9;at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&#10;&#9;at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)&#10;&#9;at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&#10;&#9;at com.facebook.buck.testrunner.SameThreadFailOnTimeout.lambda$new$0(SameThreadFailOnTimeout.java:41)&#10;&#9;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#10;&#9;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#10;&#9;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#10;&#9;at java.lang.Thread.run(Thread.java:748)&#10;" success="false" suite="i_introduction._0_Hello_World._00_Start" time="8" type="FAILURE"/>
</testcase>
